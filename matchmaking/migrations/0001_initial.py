# Generated by Django 4.2.9 on 2024-02-21 18:47

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="City",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "name",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Destination",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "primary_city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="matchmaking.city",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "months",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.PositiveIntegerField(
                            choices=[
                                (1, "January"),
                                (2, "February"),
                                (3, "March"),
                                (4, "April"),
                                (5, "May"),
                                (6, "June"),
                                (7, "July"),
                                (8, "August"),
                                (9, "September"),
                                (10, "October"),
                                (11, "November"),
                                (12, "December"),
                            ]
                        ),
                        default=list,
                        size=12,
                    ),
                ),
                (
                    "fears_phobias_medical",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("heights", "Severe fear of heights"),
                                (
                                    "deep_water",
                                    "Fear of deep water (e.g. swimming in the ocean)",
                                ),
                                ("seasick", "Sea sickness"),
                                ("claustrophobic", "Claustrophobia"),
                                ("insects_reptiles", "Fear of insects/reptiles"),
                                ("swimming", "Can't swim"),
                                (
                                    "strenuous",
                                    "Unable to do prolonged physical activities",
                                ),
                                ("pregnant", "Pregnancy"),
                                ("cats", "Fear of cats"),
                                ("dogs", "Fear of dogs"),
                            ],
                            max_length=100,
                            verbose_name="shouldn't have this condition",
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "unsuitable_for_dietary_requirement",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("vegetarian", "Vegetarian"),
                                ("vegan", "Vegan"),
                                ("pescatarian", "Pescatarian"),
                                ("halal_kosher", "Halal or Kosher"),
                                ("lactose_intolerant", "Lactose intolerant"),
                                ("gluten_intolerant", "Gluten intolerant (mild)"),
                                ("no_alcohol", "Don't drink alcohol"),
                                ("no_red_meat", "Don't eat red meat"),
                                ("no_fish", "Don't eat fish"),
                                ("no_shellfish", "Don't eat shellfish"),
                                (
                                    "other_severe",
                                    "Other severe allergies/health conditions that affect diet",
                                ),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("duration_minutes", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="ExperienceThemeMinimumRatings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("Outdoor", "Doing outdoor activities"),
                            ("Nature", "Relaxing in nature"),
                            ("Villages", "Wandering around charming/pretty villages"),
                            ("Sites", "Seeing popular sites and landmarks"),
                            ("History", "Going to places of historical significance"),
                            ("Museums & Art", "Visiting museums and art galleries"),
                            ("Shows", "Enjoying local performances"),
                            ("R&R", "Getting some rest and relaxation"),
                            (
                                "Wildlife",
                                "Seeing and interacting with wildlife in nature",
                            ),
                            ("Food", "Eating good local food"),
                        ],
                        max_length=20,
                        verbose_name="Rating value",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Experience theme minimum ratings",
            },
        ),
        migrations.CreateModel(
            name="ExperienceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Nature walk", "Nature Walk"),
                            ("Hiking", "Hiking"),
                            ("Biking/segway", "Biking Segway"),
                            ("Boat trips", "Boat Trips"),
                            ("Swimming/snorkeling", "Swimming Snorkeling"),
                            ("Kayaking/SUP", "Kayaking"),
                            ("Rafting", "Rafting"),
                            ("Surfing", "Surfing"),
                            ("Scuba diving", "Scuba Diving"),
                            ("Canyoning/caving", "Canyoning Caving"),
                            ("Paragliding", "Paragliding"),
                            ("Horse riding/camel riding", "Horse Riding Camel Riding"),
                            ("Wine tasting", "Wine Tasting"),
                            ("Brewery/distillery tour", "Brewery Distillery Tour"),
                            ("Spa treatments with physical contact", "Spa Treatments"),
                        ],
                        max_length=50,
                    ),
                ),
                ("affected_by_group_private", models.BooleanField()),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Shell",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("length", models.PositiveIntegerField()),
                ("transport_duration_minutes", models.PositiveIntegerField()),
                (
                    "destination",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="matchmaking.destination",
                    ),
                ),
                (
                    "flying_back_from_city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="shells_flying_back_from_city",
                        to="matchmaking.city",
                    ),
                ),
                (
                    "flying_to_city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="shells_flying_to_city",
                        to="matchmaking.city",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Itinerary",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("experiences", models.ManyToManyField(to="matchmaking.experience")),
                (
                    "shell",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="itineraries",
                        to="matchmaking.shell",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="experience",
            name="experience_types",
            field=models.ManyToManyField(to="matchmaking.experiencetype"),
        ),
        migrations.AddField(
            model_name="experience",
            name="theme_minimum_ratings",
            field=models.ManyToManyField(
                to="matchmaking.experiencethememinimumratings"
            ),
        ),
        migrations.AddField(
            model_name="city",
            name="country",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="matchmaking.country"
            ),
        ),
    ]
